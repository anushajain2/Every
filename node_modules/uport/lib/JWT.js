'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.createJWT = createJWT;
exports.verifyJWT = verifyJWT;

var _didJwt = require('did-jwt');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**  @module uport-js/JWT */

/**
*  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.
*
*  @example
*  const signer = SimpleSigner(process.env.PRIVATE_KEY)
*  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {
*      ...
*  })
*
*  @param    {Object}            [config]           an unsigned credential object
*  @param    {String}            config.address     address, typically the uPort address of the signer which becomes the issuer
*  @param    {SimpleSigner}      config.signer      a signer, reference our SimpleSigner.js
*  @param    {Object}            payload            payload object
*  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error
*/
function createJWT(_ref, payload) {
  var address = _ref.address,
      signer = _ref.signer;

  return new _promise2.default(function (resolve, reject) {
    if (!address) {
      return reject(new Error('No application identity address has been configured'));
    }
    if (!signer) {
      return reject(new Error('No Signer functionality has been configured'));
    }
    return (0, _didJwt.createJWT)(payload, { issuer: address,
      signer: signer }).then(function (jwt) {
      resolve(jwt);
    });
  });
}

/**
*  Verifies given JWT. Registry is used to resolve uPort address to public key for verification.
*  If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,
*  and the profile of the issuer of the JWT.
*
*  @example
*  const registry =  new UportLite()
*  verifyJWT({registry, address: '5A8bRWU3F7j3REx3vkJ...'}, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....').then(obj => {
*      const payload = obj.payload
*      const profile = obj.profile
*      const jwt = obj.jwt
*      ...
*  })
*
*  @param    {Object}            [config]           an unsigned credential object
*  @param    {String}            config.address     address, typically the uPort address of the signer which becomes the issuer
*  @param    {UportLite}         config.registry    a uPort registry, reference our uport-lite library
*  @param    {String}            jwt                a JSON Web Token to verify
*  @param    {String}            callbackUrl        callback url in JWT
*  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error
*/
function verifyJWT(_ref2, jwt) {
  var registry = _ref2.registry,
      address = _ref2.address;
  var callbackUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  return new _promise2.default(function (resolve, reject) {
    return (0, _didJwt.verifyJWT)(jwt, { audience: address, callbackUrl: callbackUrl }).then(function (verifiedObj) {
      var obj = {};
      if (verifiedObj.doc) obj.profile = verifiedObj.doc;
      resolve((0, _extends3.default)({}, obj, verifiedObj));
    });
  });
}

exports.default = { createJWT: createJWT, verifyJWT: verifyJWT };