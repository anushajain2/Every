'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _didResolver = require('did-resolver');

var _didResolver2 = _interopRequireDefault(_didResolver);

var _register = require('../register');

var _register2 = _interopRequireDefault(_register);

var _truffleContract = require('truffle-contract');

var _truffleContract2 = _interopRequireDefault(_truffleContract);

var _ethrDidRegistry = require('ethr-did-registry');

var _ethrDidRegistry2 = _interopRequireDefault(_ethrDidRegistry);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _ganacheCli = require('ganache-cli');

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Secp256k1SignatureAuthentication2018 = _register.delegateTypes.Secp256k1SignatureAuthentication2018,
    Secp256k1VerificationKey2018 = _register.delegateTypes.Secp256k1VerificationKey2018;


function sleep(seconds) {
  return new _promise2.default(function (resolve, reject) {
    return setTimeout(resolve, seconds * 1000);
  });
}

describe('ethrResolver', function () {
  var provider = _ganacheCli2.default.provider();
  // const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545')
  var DidReg = (0, _truffleContract2.default)(_ethrDidRegistry2.default);
  var web3 = new _web2.default();
  web3.setProvider(provider);
  var getAccounts = function getAccounts() {
    return new _promise2.default(function (resolve, reject) {
      return web3.eth.getAccounts(function (error, accounts) {
        return error ? reject(error) : resolve(accounts);
      });
    });
  };
  DidReg.setProvider(provider);

  var stopMining = function stopMining() {
    return new _promise2.default(function (resolve, reject) {
      return web3.currentProvider.send({
        jsonrpc: '2.0',
        method: 'miner_stop',
        id: new Date().getTime()
      }, function (e, val) {
        if (e) reject(e);
        return resolve(val);
      });
    });
  };

  var startMining = function startMining() {
    new _promise2.default(function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(resolve, reject) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                web3.currentProvider.send({
                  jsonrpc: '2.0',
                  method: 'miner_start',
                  params: [1],
                  id: new Date().getTime()
                }, function (e, val) {
                  if (e) reject(e);
                  return resolve(val);
                });

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  };

  var registry = void 0,
      accounts = void 0,
      did = void 0,
      identity = void 0,
      owner = void 0,
      delegate1 = void 0,
      delegate2 = void 0;

  beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getAccounts();

          case 2:
            accounts = _context2.sent;

            identity = accounts[1];
            owner = accounts[2];
            delegate1 = accounts[3];
            delegate2 = accounts[4];
            did = 'did:ethr:' + identity;

            _context2.next = 10;
            return DidReg.new({
              from: accounts[0],
              gasPrice: 100000000000,
              gas: 4712388 //1779962
            });

          case 10:
            registry = _context2.sent;

            (0, _register2.default)({ provider: provider, registry: registry.address });

          case 12:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  describe('unregistered', function () {
    it('resolves document', function () {
      return expect((0, _didResolver2.default)(did)).resolves.toEqual({
        '@context': 'https://w3id.org/did/v1',
        id: did,
        publicKey: [{
          id: did + '#owner',
          type: 'Secp256k1VerificationKey2018',
          owner: did,
          ethereumAddress: identity
        }],
        authentication: [{
          type: 'Secp256k1SignatureAuthentication2018',
          publicKey: did + '#owner'
        }]
      });
    });
  });

  describe('owner changed', function () {
    beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return registry.changeOwner(identity, owner, { from: identity });

            case 2:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, undefined);
    })));

    it('resolves document', function () {
      return expect((0, _didResolver2.default)(did)).resolves.toEqual({
        '@context': 'https://w3id.org/did/v1',
        id: did,
        publicKey: [{
          id: did + '#owner',
          type: 'Secp256k1VerificationKey2018',
          owner: did,
          ethereumAddress: owner
        }],
        authentication: [{
          type: 'Secp256k1SignatureAuthentication2018',
          publicKey: did + '#owner'
        }]
      });
    });
  });

  describe('delegates', function () {
    describe('add signing delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return registry.addDelegate(identity, Secp256k1VerificationKey2018, delegate1, 2, { from: owner });

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate1
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }]
        });
      });
    });

    describe('add auth delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return registry.addDelegate(identity, Secp256k1SignatureAuthentication2018, delegate2, 10, { from: owner });

              case 2:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate1
          }, {
            id: did + '#delegate-2',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate2
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }, {
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#delegate-2'
          }]
        });
      });
    });

    describe('expire automatically', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return sleep(3);

              case 2:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate2
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }, {
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#delegate-1'
          }]
        });
      });
    });

    describe('revokes delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return registry.revokeDelegate(identity, Secp256k1SignatureAuthentication2018, delegate2, { from: owner });

              case 2:
                _context7.next = 4;
                return sleep(1);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }]
        });
      });
    });

    describe('re-add auth delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return sleep(3);

              case 2:
                _context8.next = 4;
                return registry.addDelegate(identity, Secp256k1SignatureAuthentication2018, delegate2, 86400, { from: owner });

              case 4:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate2
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }, {
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#delegate-1'
          }]
        });
      });
    });
  });

  describe('attributes', function () {
    describe('add publicKey', function () {
      describe('Secp256k1VerificationKey2018', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
          return _regenerator2.default.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return registry.setAttribute(identity, (0, _register.stringToBytes32)('did/pub/Secp256k1/veriKey'), '0x02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 10, { from: owner });

                case 2:
                case 'end':
                  return _context9.stop();
              }
            }
          }, _callee9, undefined);
        })));
        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-2',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              publicKeyHex: '02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71'
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }]
          });
        });
      });

      describe('Ed25519VerificationKey2018', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
          return _regenerator2.default.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return registry.setAttribute(identity, (0, _register.stringToBytes32)('did/pub/Ed25519/veriKey/base64'), '0x02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 10, { from: owner });

                case 2:
                case 'end':
                  return _context10.stop();
              }
            }
          }, _callee10, undefined);
        })));

        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-2',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              publicKeyHex: '02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71'
            }, {
              id: did + '#delegate-3',
              type: 'Ed25519VerificationKey2018',
              owner: did,
              publicKeyBase64: Buffer.from('02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 'hex').toString('base64')
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }]
          });
        });
      });
    });

    describe('add service endpoints', function () {
      describe('HubService', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
          return _regenerator2.default.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return registry.setAttribute(identity, (0, _register.stringToBytes32)('did/svc/HubService'), 'https://hubs.uport.me', 10, { from: owner });

                case 2:
                case 'end':
                  return _context11.stop();
              }
            }
          }, _callee11, undefined);
        })));
        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-2',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              publicKeyHex: '02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71'
            }, {
              id: did + '#delegate-3',
              type: 'Ed25519VerificationKey2018',
              owner: did,
              publicKeyBase64: Buffer.from('02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 'hex').toString('base64')
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }],
            service: [{
              type: 'HubService',
              serviceEndpoint: 'https://hubs.uport.me'
            }]
          });
        });
      });
    });

    describe('revoke publicKey', function () {
      describe('Secp256k1VerificationKey2018', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12() {
          return _regenerator2.default.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.next = 2;
                  return registry.revokeAttribute(identity, (0, _register.stringToBytes32)('did/pub/Secp256k1/veriKey'), '0x02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', { from: owner });

                case 2:
                  sleep(1);

                case 3:
                case 'end':
                  return _context12.stop();
              }
            }
          }, _callee12, undefined);
        })));
        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-3',
              type: 'Ed25519VerificationKey2018',
              owner: did,
              publicKeyBase64: Buffer.from('02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 'hex').toString('base64')
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }],
            service: [{
              type: 'HubService',
              serviceEndpoint: 'https://hubs.uport.me'
            }]
          });
        });
      });

      describe('Ed25519VerificationKey2018', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {
          return _regenerator2.default.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _context13.next = 2;
                  return registry.revokeAttribute(identity, (0, _register.stringToBytes32)('did/pub/Ed25519/veriKey/base64'), '0x02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', { from: owner });

                case 2:
                  sleep(1);

                case 3:
                case 'end':
                  return _context13.stop();
              }
            }
          }, _callee13, undefined);
        })));
        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }],
            service: [{
              type: 'HubService',
              serviceEndpoint: 'https://hubs.uport.me'
            }]
          });
        });
      });
    });

    describe('revoke service endpoints', function () {
      describe('HubService', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {
          return _regenerator2.default.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _context14.next = 2;
                  return registry.revokeAttribute(identity, (0, _register.stringToBytes32)('did/svc/HubService'), 'https://hubs.uport.me', { from: owner });

                case 2:
                  sleep(1);

                case 3:
                case 'end':
                  return _context14.stop();
              }
            }
          }, _callee14, undefined);
        })));

        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }]
          });
        });
      });
    });
  });

  describe('multiple events in one block', function () {
    beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {
      return _regenerator2.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return stopMining();

            case 2:
              _context15.next = 4;
              return _promise2.default.all([registry.setAttribute(identity, (0, _register.stringToBytes32)('did/svc/TestService'), 'https://test.uport.me', 10, { from: owner }), registry.setAttribute(identity, (0, _register.stringToBytes32)('did/svc/TestService'), 'https://test.uport.me', 10, { from: owner }), sleep(1).then(function () {
                return startMining();
              })]);

            case 4:
            case 'end':
              return _context15.stop();
          }
        }
      }, _callee15, undefined);
    })));

    it('resolves document', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {
      return _regenerator2.default.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.t0 = expect;
              _context16.next = 3;
              return (0, _didResolver2.default)(did);

            case 3:
              _context16.t1 = _context16.sent;
              _context16.t2 = {
                '@context': 'https://w3id.org/did/v1',
                id: did,
                publicKey: [{
                  id: did + '#owner',
                  type: 'Secp256k1VerificationKey2018',
                  owner: did,
                  ethereumAddress: owner
                }, {
                  id: did + '#delegate-1',
                  type: 'Secp256k1VerificationKey2018',
                  owner: did,
                  ethereumAddress: delegate2
                }],
                authentication: [{
                  type: 'Secp256k1SignatureAuthentication2018',
                  publicKey: did + '#owner'
                }, {
                  type: 'Secp256k1SignatureAuthentication2018',
                  publicKey: did + '#delegate-1'
                }],
                service: [{
                  type: 'TestService',
                  serviceEndpoint: 'https://test.uport.me'
                }]
              };
              (0, _context16.t0)(_context16.t1).toEqual(_context16.t2);

            case 6:
            case 'end':
              return _context16.stop();
          }
        }
      }, _callee16, undefined);
    })));
  });

  describe('error handling', function () {
    it('rejects promise', function () {
      return expect((0, _didResolver2.default)('did:ethr:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX')).rejects.toEqual(new Error('Not a valid ethr DID: did:ethr:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX'));
    });
  });
});