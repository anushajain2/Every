'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _noUnusedVars = require('eslint/lib/rules/no-unused-vars');

var _noUnusedVars2 = _interopRequireDefault(_noUnusedVars);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var meta = _noUnusedVars2.default.meta;


meta.schema[0].oneOf.find(function (x) {
	return x.type === 'object';
}).properties.ignoreDestructuredVarsWithRest = {
	type: 'boolean'
};

exports.default = {
	meta: meta,
	create: function create(context) {
		var _context$options = _slicedToArray(context.options, 1),
		    options = _context$options[0];

		var proxyContext = context;
		if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options.ignoreDestructuredVarsWithRest) {
			// ESLint freezes context, so can't monkey patch directly
			proxyContext = Object.create(context);
			proxyContext.report = function report() {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				var node = args.length === 1 ? args[0].node : args[0];

				if (isDestructuredVarWithRestProperty(node)) {
					// ignore reports for nodes passing the test
					return;
				}

				context.report.apply(context, args);
			};
		}

		// create the core rule with the patched context
		return _noUnusedVars2.default.create(proxyContext);
	}
};


function isDestructuredVarWithRestProperty(node) {
	var parent = node.parent;

	return parent && parent.type === 'Property' && parent.parent.type === 'ObjectPattern' && parent.parent.properties.some(function (p) {
		return p.type === 'ExperimentalRestProperty';
	});
}