'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _didJwt = require('did-jwt');

var _JWT = require('./JWT');

var _elliptic = require('elliptic');

var _uportDidResolver = require('uport-did-resolver');

var _uportDidResolver2 = _interopRequireDefault(_uportDidResolver);

var _muportDidResolver = require('muport-did-resolver');

var _muportDidResolver2 = _interopRequireDefault(_muportDidResolver);

var _ethrDidResolver = require('ethr-did-resolver');

var _ethrDidResolver2 = _interopRequireDefault(_ethrDidResolver);

var _uportLite = require('uport-lite');

var _uportLite2 = _interopRequireDefault(_uportLite);

var _nets = require('nets');

var _nets2 = _interopRequireDefault(_nets);

var _tweetnacl = require('tweetnacl');

var _tweetnacl2 = _interopRequireDefault(_tweetnacl);

var _tweetnaclUtil = require('tweetnacl-util');

var _tweetnaclUtil2 = _interopRequireDefault(_tweetnaclUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MNID = require('mnid');

var secp256k1 = new _elliptic.ec('secp256k1');

/**
*    The Credentials class allows you to easily create the signed payloads used in uPort inlcuding
*    credentials and signed mobile app requests (ex. selective disclosure requests
*    for private data). It also provides signature verification over signed payloads and
*    allows you to send push notifications to users.
*/
var Credentials = function () {

  /**
   * Instantiates a new uPort Credentials object
   *
   * @example
   * import { Credentials, SimpleSigner } from 'uport'
   * const networks = {  '0x94365e3b': { rpcUrl: 'https://private.chain/rpc', registry: '0x0101.... }}
   * const setttings = { networks, address: '5A8bRWU3F7j3REx3vkJ...', signer: new SimpleSigner(process.env.PRIVATE_KEY)}
   * const credentials = new Credentials(settings)
   *
   * @example
   * import { Credentials } from 'uport'
   * const credentials = new Credentials()
   *
   * @param       {Object}            [settings]             setttings
   * @param       {Object}            settings.networks      networks config object, ie. {  '0x94365e3b': { rpcUrl: 'https://private.chain/rpc', address: '0x0101.... }}
   * @param       {UportLite}         settings.registry      a registry object from UportLite
   * @param       {SimpleSigner}      settings.signer        a signer object, see SimpleSigner.js
   * @param       {Address}           settings.address       your uPort address (may be the address of your application's uPort identity)
   * @return      {Credentials}                              self
   */
  function Credentials() {
    var _this = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        networks = _ref.networks,
        registry = _ref.registry,
        signer = _ref.signer,
        address = _ref.address,
        ethrConfig = _ref.ethrConfig,
        muportConfig = _ref.muportConfig;

    (0, _classCallCheck3.default)(this, Credentials);

    this.settings = {};
    if (signer) this.settings.signer = signer;

    if (address) {
      if (/did/.test(address)) throw new Error('Only MNID/hex app identities supported');
      // legacy hex app ids are on ropsten, but need mnid here for did jwt
      this.settings.address = MNID.isMNID(address) ? address : MNID.encode({ network: '0x3', address: address });
    }

    this.signJWT = function (payload, expiresIn) {
      return (0, _JWT.createJWT)({ issuer: _this.settings.address, signer: _this.settings.signer, expiresIn: expiresIn }, payload);
    };

    // backwards compatibility
    this.settings.networks = networks ? configNetworks(networks) : {};
    if (!this.settings.registry) {
      var _registry = (0, _uportLite2.default)({ networks: this.settings.networks });
      this.settings.registry = function (address) {
        return new _promise2.default(function (resolve, reject) {
          _registry(address, function (error, profile) {
            if (error) return reject(error);
            resolve(profile);
          });
        });
      };
    }
    (0, _uportDidResolver2.default)(registry || (0, _uportLite2.default)({ networks: networks ? configNetworks(networks) : {} }));
    (0, _ethrDidResolver2.default)(ethrConfig || {});
    (0, _muportDidResolver2.default)(muportConfig || {});
  }

  /**
   *  Creates a signed request token (JWT) given a request params object.
   *
   *  @example
   *  const req = { requested: ['name', 'country'],
   *                callbackUrl: 'https://myserver.com',
   *                notifications: true }
   *  credentials.createRequest(req).then(jwt => {
   *      ...
   *  })
   requested: ['name','phone','identity_no'],
      callbackUrl: 'https://....' // URL to send the response of the request to
      notifications: true
  
   *
   *  @param    {Object}             [params={}]           request params object
   *  @param    {Array}              params.requested      an array of attributes for which you are requesting credentials to be shared for
   *  @param    {Array}              params.verified       an array of attributes for which you are requesting verified credentials to be shared for
   *  @param    {Boolean}            params.notifications  boolean if you want to request the ability to send push notifications
   *  @param    {String}             params.callbackUrl    the url which you want to receive the response of this request
   *  @param    {String}             params.network_id     network id of Ethereum chain of identity eg. 0x4 for rinkeby
   *  @param    {String}             params.accountType    Ethereum account type: "general", "segregated", "keypair", "devicekey" or "none"
   *  @return   {Promise<Object, Error>}                   a promise which resolves with a signed JSON Web Token or rejects with an error
   */


  (0, _createClass3.default)(Credentials, [{
    key: 'createRequest',
    value: function createRequest() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var expiresIn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 600;

      var payload = {};
      if (params.requested) {
        payload.requested = params.requested;
      }
      if (params.verified) {
        payload.verified = params.verified;
      }
      if (params.notifications) {
        payload.permissions = ['notifications'];
      }
      if (params.callbackUrl) {
        payload.callback = params.callbackUrl;
      }
      if (params.network_id) {
        payload.net = params.network_id;
      }
      if (params.accountType) {
        if (['general', 'segregated', 'keypair', 'devicekey', 'none'].indexOf(params.accountType) >= 0) {
          payload.act = params.accountType;
        } else {
          return _promise2.default.reject(new Error('Unsupported accountType ' + params.accountType));
        }
      }

      if (params.exp) {
        // checks for expiration on requests, if none is provided the default is 10 min
        payload.exp = params.exp;
      }
      return (0, _JWT.createJWT)({ address: this.settings.address, signer: this.settings.signer }, (0, _extends3.default)({}, payload, { type: 'shareReq' }));
      //return this.signJWT({...payload, type: 'shareReq'}, params.exp ? undefined : expiresIn)
    }

    /**
     *  Creates a signed request for the user to attest a list of claims.
     *
     *  @example
     *  const unsignedClaim = {
     *    claim: {
     *      "Citizen of city X": {
     *        "Allowed to vote": true,
     *        "Document": "QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmPW"
     *      }
     *    },
     *    sub: "2oTvBxSGseWFqhstsEHgmCBi762FbcigK5u"
     *  }
     *  credentials.createVerificationRequest(unsignedClaim).then(jwt => {
     *    ...
     *  })
     *
     *  @param    {Object}              unsignedClaim       an object that is an unsigned claim which you want the user to attest
     *  @param    {String}             sub                  the DID of the identity you want to sign the attestation
     *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or rejects with an error
     */

  }, {
    key: 'createVerificationRequest',
    value: function createVerificationRequest(unsignedClaim, sub) {
      return (0, _JWT.createJWT)({ address: this.settings.address, signer: this.settings.signer }, { unsignedClaim: unsignedClaim, sub: sub, type: 'verReq' });
    }

    /**
      *  Receive signed response token from mobile app. Verifies and parses the given response token.
      *
      *  @example
      *  const resToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....'
      *  credentials.receive(resToken).then(res => {
      *      const credentials = res.verified
             const name =  res.name
      *      ...
      *  })
      *
      *  @param    {String}                  token                 a response token
      *  @param    {String}                  [callbackUrl=null]    callbackUrl
      *  @return   {Promise<Object, Error>}                        a promise which resolves with a parsed response or rejects with an error.
      */

  }, {
    key: 'receive',
    value: function receive(token) {
      var callbackUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this.authenticate(token, callbackUrl);
    }
  }, {
    key: 'processDisclosurePayload',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2) {
        var _this2 = this;

        var doc = _ref2.doc,
            payload = _ref2.payload;
        var credentials, verified;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                credentials = (0, _extends3.default)({}, doc.uportProfile || {}, payload.own || {}, payload.capabilities && payload.capabilities.length === 1 ? { pushToken: payload.capabilities[0] } : {}, { address: payload.iss, did: payload.iss });

                if (payload.nad) {
                  credentials.networkAddress = payload.nad;
                }
                if (payload.dad) {
                  credentials.deviceKey = payload.dad;
                }

                // Backwards support
                try {
                  if (doc.publicKey[0].publicKeyHex) credentials.publicKey = '0x' + doc.publicKey[0].publicKeyHex;
                  if (doc.publicKey[1].publicKeyBase64) credentials.publicEncKey = doc.publicKey[1].publicKeyBase64;
                } catch (err) {}

                if (!credentials.publicEncKey) credentials.publicEncKey = payload.publicEncKey;

                if (!payload.verified) {
                  _context.next = 12;
                  break;
                }

                _context.next = 8;
                return _promise2.default.all(payload.verified.map(function (token) {
                  return (0, _JWT.verifyJWT)({ adress: _this2.settings.address, signer: _this2.settings.signer }, token);
                }));

              case 8:
                verified = _context.sent;
                return _context.abrupt('return', (0, _extends3.default)({}, credentials, { verified: verified.map(function (v) {
                    return (0, _extends3.default)({}, v.payload, { jwt: v.jwt });
                  }) }));

              case 12:
                return _context.abrupt('return', credentials);

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function processDisclosurePayload(_x5) {
        return _ref3.apply(this, arguments);
      }

      return processDisclosurePayload;
    }()

    /**
    *  Authenticates [Selective Disclosure Response JWT](https://github.com/uport-project/specs/blob/develop/messages/shareresp.md) from mobile
    *  app as part of the [Selective Disclosure Flow](https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md).
    *
    *  It Verifies and parses the given response token and verifies the challenge response flow.
    *
    *  @example
    *  const resToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....'
    *  credentials.authenticate(resToken).then(res => {
    *      const credentials = res.verified
    *       const name =  res.name
    *      ...
    *  })
    *
    *  @param    {String}                  token                 a response token
    *  @param    {String}                  [callbackUrl=null]    callbackUrl
    *  @return   {Promise<Object, Error>}                        a promise which resolves with a parsed response or rejects with an error.
    */

  }, {
    key: 'authenticate',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(token) {
        var callbackUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        var _ref5, payload, doc, challenge;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _JWT.verifyJWT)({ address: this.settings.address }, token, callbackUrl);

              case 2:
                _ref5 = _context2.sent;
                payload = _ref5.payload;
                doc = _ref5.doc;

                if (!payload.req) {
                  _context2.next = 13;
                  break;
                }

                _context2.next = 8;
                return (0, _JWT.verifyJWT)({ address: this.settings.address }, payload.req, callbackUrl);

              case 8:
                challenge = _context2.sent;

                if (!(challenge.payload.iss === this.settings.address && challenge.payload.type === 'shareReq')) {
                  _context2.next = 11;
                  break;
                }

                return _context2.abrupt('return', this.processDisclosurePayload({ payload: payload, doc: doc }));

              case 11:
                _context2.next = 14;
                break;

              case 13:
                return _context2.abrupt('return', this.processDisclosurePayload({ payload: payload, doc: doc }));

              case 14:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function authenticate(_x7) {
        return _ref4.apply(this, arguments);
      }

      return authenticate;
    }()

    /**
      *  Send a push notification to a user, consumes a token which allows you to send push notifications
      *  and a url/uri request you want to send to the user.
      *
      *  @param    {String}                  token              a push notification token (get a pn token by requesting push permissions in a request)
      *  @param    {Object}                  payload            push notification payload
      *  @param    {String}                  payload.url        a uport request url
      *  @param    {String}                  payload.message    a message to display to the user
      *  @param    {String}                  pubEncKey          the public encryption key of the receiver, encoded as a base64 string
      *  @return   {Promise<Object, Error>}              a promise which resolves with successful status or rejects with an error
      */

  }, {
    key: 'push',
    value: function push(token, pubEncKey, payload) {
      return new _promise2.default(function (resolve, reject) {
        if (!token) {
          reject(new Error('Missing push notification token'));
        }
        if (!pubEncKey || pubEncKey.url) {
          reject(new Error('Missing public encryption key of the receiver'));
        }
        if (!payload || !payload.url) {
          reject(new Error('Missing payload url for sending to users device'));
        }
        var iss = (0, _didJwt.decodeJWT)(token).payload.iss;
        var PUTUTU_URL = 'https://api.uport.me';
        var endpoint = '/pututu/sns';
        var plaintext = padMessage((0, _stringify2.default)(payload));
        var enc = encryptMessage(plaintext, pubEncKey);
        payload = { message: (0, _stringify2.default)(enc) };

        (0, _nets2.default)({
          uri: PUTUTU_URL + endpoint,
          json: payload,
          method: 'POST',
          withCredentials: false,
          headers: {
            Authorization: 'Bearer ' + token
          }
        }, function (error, res, body) {
          if (error) return reject(error);
          if (res.statusCode === 200) {
            resolve(body);
          }
          if (res.statusCode === 403) {
            return reject(new Error('Error sending push notification to user: Invalid Token'));
          }
          reject(new Error('Error sending push notification to user: ' + res.statusCode + ' ' + body.toString()));
        });
      });
    }

    /**
      *  Create a credential (a signed JSON Web Token)
      *
      *  @example
      *  credentials.attest({
      *   sub: '5A8bRWU3F7j3REx3vkJ...', // uPort address of user, likely a MNID
      *   exp: <future timestamp>,
      *   claim: { name: 'John Smith' }
      *  }).then( credential => {
      *   ...
      *  })
      *
      * @param    {Object}            [credential]           a unsigned credential object
      * @param    {String}            credential.sub         subject of credential (a uPort address)
      * @param    {String}            credential.claim       claim about subject single key value or key mapping to object with multiple values (ie { address: {street: ..., zip: ..., country: ...}})
      * @param    {String}            credential.exp         time at which this claim expires and is no longer valid (seconds since epoch)
      * @return   {Promise<Object, Error>}                   a promise which resolves with a credential (JWT) or rejects with an error
      */

  }, {
    key: 'attest',
    value: function attest(_ref6) {
      var sub = _ref6.sub,
          claim = _ref6.claim,
          exp = _ref6.exp;

      return (0, _JWT.createJWT)({ address: this.settings.address, signer: this.settings.signer }, { sub: sub, claim: claim, exp: exp });
    }

    /**
      *  Look up a profile in the registry for a given uPort address. Address must be MNID encoded.
      *
      *  @example
      *  credentials.lookup('5A8bRWU3F7j3REx3vkJ...').then(profile => {
      *     const name = profile.name
      *     const pubkey = profile.pubkey
      *     ...
      *   })
      *
      * @param    {String}            address             a MNID encoded address
      * @return   {Promise<Object, Error>}                a promise which resolves with parsed profile or rejects with an error
      */

  }, {
    key: 'lookup',
    value: function lookup(address) {
      return this.settings.registry(address);
    }

    // createJWT ({address, signer}, payload) {
    //   return createJWT(
    //     payload, { issuer: address,
    //       signer: signer})
    // }

    // verifyJWT ({registry, address}, jwt, callbackUrl = null) {
    //   return verifyJWT(jwt, {audience: address, callbackUrl: callbackUrl})
    // }

  }]);
  return Credentials;
}();

var configNetworks = function configNetworks(nets) {
  (0, _keys2.default)(nets).forEach(function (key) {
    var net = nets[key];
    if ((typeof net === 'undefined' ? 'undefined' : (0, _typeof3.default)(net)) === 'object') {
      ['registry', 'rpcUrl'].forEach(function (key) {
        if (!net.hasOwnProperty(key)) throw new Error('Malformed network config object, object must have \'' + key + '\' key specified.');
      });
    } else {
      throw new Error('Network configuration object required');
    }
  });
  return nets;
};

/**
 *  Adds padding to a string
 *
 *  @param      {String}        the message to be padded
 *  @return     {String}        the padded message
 *  @private
 */
var padMessage = function padMessage(message) {
  var INTERVAL_LENGTH = 50;
  var padLength = INTERVAL_LENGTH - message.length % INTERVAL_LENGTH;

  return message + ' '.repeat(padLength);
};

/**
 *  Encrypts a message
 *
 *  @param      {String}        the message to be encrypted
 *  @param      {String}        the public encryption key of the receiver, encoded as base64
 *  @return     {String}        the encrypted message, encoded as base64
 *  @private
 */
var encryptMessage = function encryptMessage(message, receiverKey) {
  var tmpKp = _tweetnacl2.default.box.keyPair();
  var decodedKey = _tweetnaclUtil2.default.decodeBase64(receiverKey);
  var decodedMsg = _tweetnaclUtil2.default.decodeUTF8(message);
  var nonce = _tweetnacl2.default.randomBytes(24);

  var ciphertext = _tweetnacl2.default.box(decodedMsg, nonce, decodedKey, tmpKp.secretKey);
  return {
    from: _tweetnaclUtil2.default.encodeBase64(tmpKp.publicKey),
    nonce: _tweetnaclUtil2.default.encodeBase64(nonce),
    ciphertext: _tweetnaclUtil2.default.encodeBase64(ciphertext)
  };
};

exports.default = Credentials;