'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var ipfsLookup = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(hash, conf) {
    var url;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            conf = conf || IPFS_CONF;
            url = conf.protocol + '://' + conf.host + '/ipfs/' + hash;
            return _context.abrupt('return', request(url));

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function ipfsLookup(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var ethLookup = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(managementKey) {
    var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROVIDER_URL;
    var registryAddress, address, callData, hexHash;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // registry should always be deployed to this address
            registryAddress = '0x37c3719cdabd54e6b5195e366f9ef8fc59a509e3';
            address = managementKey.length === 42 ? managementKey.slice(2) : toEthereumAddress(managementKey);
            callData = createCallData(address);
            _context2.next = 5;
            return request(rpcUrl, (0, _stringify2.default)({
              method: 'eth_call',
              params: [{ to: registryAddress, data: callData }, 'latest'],
              id: 1,
              jsonrpc: '2.0'
            }));

          case 5:
            hexHash = _context2.sent.result;
            return _context2.abrupt('return', hexHash === ZERO_HASH ? null : hexToIpfsHash(hexHash));

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function ethLookup(_x4) {
    return _ref2.apply(this, arguments);
  };
}();

var _bs = require('bs58');

var _bs2 = _interopRequireDefault(_bs);

var _elliptic = require('elliptic');

var _jsSha = require('js-sha3');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XMLHttpRequest = typeof window !== 'undefined' ? window.XMLHttpRequest : require('xmlhttprequest').XMLHttpRequest;
var secp256k1 = new _elliptic.ec('secp256k1');

var PROVIDER_URL = 'https://mainnet.infura.io';
var IPFS_CONF = { host: 'ipfs.infura.io', port: 5001, protocol: 'https' };
var ZERO_HASH = '0x0000000000000000000000000000000000000000000000000000000000000000';

var hexToIpfsHash = function hexToIpfsHash(hexHash) {
  return _bs2.default.encode(Buffer.from('1220' + hexHash.slice(2), 'hex'));
};
// a method call to 'lookup' with the claim key 'muPortDocumentIPFS1220'
var createCallData = function createCallData(addr) {
  return '0x5dd4a65f000000000000000000000000' + addr + '6d75506f7274446f63756d656e74495046533132323000000000000000000000';
};

function request(url, payload) {
  var request = new XMLHttpRequest();
  return new _promise2.default(function (resolve, reject) {
    request.onreadystatechange = function () {
      if (request.readyState === 4 && request.timeout !== 1) {
        if (request.status !== 200) {
          reject('[muport-did-resolver] status ' + request.status + ': ' + request.responseText);
        } else {
          try {
            resolve(JSON.parse(request.responseText));
          } catch (jsonError) {
            reject('[muport-did-resolver] while parsing data: \'' + String(request.responseText) + '\', error: ' + String(jsonError));
          }
        }
      }
    };
    if (payload) {
      request.open('POST', url);
      request.setRequestHeader('Content-Type', 'application/json');
    } else {
      request.open('GET', url);
    }
    request.setRequestHeader('accept', 'application/json');
    request.send(payload);
  });
}

var keccak = function keccak(data) {
  return Buffer.from(_jsSha.keccak_256.buffer(data));
};
var decompressPubKey = function decompressPubKey(key) {
  return secp256k1.keyFromPublic(key, 'hex').pub.encode('hex');
};
var toEthereumAddress = function toEthereumAddress(pubkey) {
  return keccak(Buffer.from(decompressPubKey(pubkey).slice(2), 'hex')).slice(-20).toString('hex');
};

module.exports = { ethLookup: ethLookup, ipfsLookup: ipfsLookup };