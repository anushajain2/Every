'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Credentials = require('../Credentials');

var _Credentials2 = _interopRequireDefault(_Credentials);

var _JWT = require('../JWT');

var _didJwt = require('did-jwt');

var _mockdate = require('mockdate');

var _mockdate2 = _interopRequireDefault(_mockdate);

var _didResolver = require('did-resolver');

var _tweetnacl = require('tweetnacl');

var _tweetnacl2 = _interopRequireDefault(_tweetnacl);

var _tweetnaclUtil = require('tweetnacl-util');

var _tweetnaclUtil2 = _interopRequireDefault(_tweetnaclUtil);

var _nock = require('nock');

var _nock2 = _interopRequireDefault(_nock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_mockdate2.default.set(1485321133 * 1000);

var privateKey = '74894f8853f90e6e3d6dfdd343eb0eb70cca06e552ed8af80adadcc573b35da3';
var signer = (0, _didJwt.SimpleSigner)(privateKey);
var address = '0xbc3ae59bc76f894822622cdef7a2018dbe353840';
var mnid = '2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX';
var did = 'did:ethr:' + mnid;

var claim = { sub: '0x112233', claim: { email: 'bingbangbung@email.com' }, exp: 1485321133 + 1 };

var uport = new _Credentials2.default({ signer: signer, address: mnid });
var uport2 = new _Credentials2.default({});

function mockresolver(profile) {
  var _this = this;

  (0, _didResolver.registerMethod)('uport', function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id, parsed) {
      var doc;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              doc = {
                '@context': 'https://w3id.org/did/v1',
                id: id,
                publicKey: [{
                  id: id + '#owner',
                  type: 'Secp256k1VerificationKey2018',
                  publicKeyHex: '048f71f156f9b489d8c566c9943585d4c255aa5d22924abe3b9f7997de46a378ac89a668eacb9053ceac72f6a0abdeee025d61984059a6732e6cb4f106ed281ffe',
                  owner: id,
                  ethereumAddress: parsed.id
                }],
                authentication: [{
                  type: 'Secp256k1SignatureAuthentication2018',
                  publicKey: id + '#owner'
                }]
              };

              if (profile) {
                doc.uportProfile = profile;
              }
              return _context.abrupt('return', doc);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
}

describe('configuration', function () {

  describe('sets did', function () {
    it('ethereum `address` configured', function () {
      expect(function () {
        return new _Credentials2.default({ address: 'did:uport:' + mnid });
      }).toThrowError('Only MNID/hex app identities supported');
    });
  });

  describe('sets signer', function () {
    it('always uses signer if passed in', function () {
      var signer = (0, _didJwt.SimpleSigner)(privateKey);
      expect(new _Credentials2.default({ signer: signer, mnid: mnid }).settings.signer).toEqual(signer);
    });
  });

  describe('configNetworks', function () {
    it('should accept a valid network setting', function () {
      var networks = { '0x94365e3b': { rpcUrl: 'https://private.chain/rpc', registry: '0x3b2631d8e15b145fd2bf99fc5f98346aecdc394c' } };
      var credentials = new _Credentials2.default({ networks: networks });
      // What is the opposite of toThrow()??
      expect(true).toBeTruthy();
    });

    it('should require a registry address', function () {
      var networks = { '0x94365e3b': { rpcUrl: 'https://private.chain/rpc' } };
      expect(function () {
        return new _Credentials2.default({ networks: networks });
      }).toThrowErrorMatchingSnapshot();
    });

    it('should require a rpcUrl', function () {
      var networks = { '0x94365e3b': { registry: '0x3b2631d8e15b145fd2bf99fc5f98346aecdc394c' } };
      expect(function () {
        return new _Credentials2.default({ networks: networks });
      }).toThrowErrorMatchingSnapshot();
    });

    it('if networks key is passed in it must contain configuration object', function () {
      var networks = { '0x94365e3b': 'hey' };
      expect(function () {
        return new _Credentials2.default({ networks: networks });
      }).toThrowErrorMatchingSnapshot();
    });
  });
});

describe('signJWT', function () {
  describe('uport method', function () {
    it('uses ES256K algorithm', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var credentials, jwt, _decodeJWT, header;

      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              credentials = new _Credentials2.default({ address: mnid, signer: signer });
              _context2.next = 3;
              return (0, _JWT.createJWT)({ address: address, signer: signer }, { hello: 1 });

            case 3:
              jwt = _context2.sent;
              _decodeJWT = (0, _didJwt.decodeJWT)(jwt), header = _decodeJWT.header;

              expect(header.alg).toEqual('ES256K');

            case 6:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));
  });
});

describe('createRequest()', function () {
  var createAndVerify = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var jwt;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return uport.createRequest(params);

            case 2:
              jwt = _context3.sent;
              _context3.next = 5;
              return (0, _JWT.verifyJWT)({ address: mnid, signer: signer }, jwt);

            case 5:
              return _context3.abrupt('return', _context3.sent);

            case 6:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function createAndVerify() {
      return _ref3.apply(this, arguments);
    };
  }();

  beforeAll(function () {
    return mockresolver();
  });

  it('creates a valid JWT for a request', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var response;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return createAndVerify({ requested: ['name', 'phone'] });

          case 2:
            response = _context4.sent;
            return _context4.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it('has correct payload in JWT for a plain request for public details', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
    var response;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return createAndVerify();

          case 2:
            response = _context5.sent;
            return _context5.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it('has correct payload in JWT requesting a specific network_id', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
    var response;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return createAndVerify({ network_id: '0x4' });

          case 2:
            response = _context6.sent;
            return _context6.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));

  it('has correct payload in JWT requesting a specific network_id', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
    var response;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return createAndVerify({ network_id: '0x4' });

          case 2:
            response = _context7.sent;
            return _context7.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  })));

  var _loop = function _loop(accountType) {
    it('has correct payload in JWT requesting accountType of ' + accountType, (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {
      var response;
      return _regenerator2.default.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return createAndVerify({ accountType: accountType });

            case 2:
              response = _context14.sent;
              return _context14.abrupt('return', expect(response).toMatchSnapshot());

            case 4:
            case 'end':
              return _context14.stop();
          }
        }
      }, _callee14, undefined);
    })));
  };

  var _arr = ['general', 'segregated', 'keypair', 'devicekey', 'none'];
  for (var _i = 0; _i < _arr.length; _i++) {
    var accountType = _arr[_i];
    _loop(accountType);
  }

  it('has correct payload in JWT requesting unsupported accountType', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            expect(createAndVerify({ accountType: 'gold' })).rejects.toMatchSnapshot();

          case 1:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  })));

  it('ignores unsupported request parameters', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
    var response;
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return createAndVerify({ signing: true, sellSoul: true });

          case 2:
            response = _context9.sent;
            return _context9.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, undefined);
  })));

  it('has correct payload in JWT for a request', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
    var response;
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return createAndVerify({ requested: ['name', 'phone'] });

          case 2:
            response = _context10.sent;
            return _context10.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, undefined);
  })));

  it('has correct payload in JWT for a request asking for verified credentials', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
    var response;
    return _regenerator2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return createAndVerify({ requested: ['name', 'phone'], verified: ['name'] });

          case 2:
            response = _context11.sent;
            return _context11.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, undefined);
  })));

  it('has correct payload in JWT for a request with callbackUrl', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12() {
    var response;
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return createAndVerify({ requested: ['name', 'phone'], callbackUrl: 'https://myserver.com' });

          case 2:
            response = _context12.sent;
            return _context12.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, undefined);
  })));

  it('has correct payload in JWT for a request for push notifications', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {
    var response;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return createAndVerify({ requested: ['name', 'phone'], notifications: true });

          case 2:
            response = _context13.sent;
            return _context13.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, undefined);
  })));
});

describe('LEGACY createRequest()', function () {
  var createAndVerify = function () {
    var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var jwt;
      return _regenerator2.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return uport.createRequest(params);

            case 2:
              jwt = _context15.sent;
              _context15.next = 5;
              return (0, _JWT.verifyJWT)({}, jwt);

            case 5:
              return _context15.abrupt('return', _context15.sent);

            case 6:
            case 'end':
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    return function createAndVerify() {
      return _ref15.apply(this, arguments);
    };
  }();

  beforeAll(function () {
    return mockresolver();
  });

  it('creates a valid JWT for a request', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {
    var response;
    return _regenerator2.default.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return createAndVerify({ requested: ['name', 'phone'] });

          case 2:
            response = _context16.sent;
            return _context16.abrupt('return', expect(response).toMatchSnapshot());

          case 4:
          case 'end':
            return _context16.stop();
        }
      }
    }, _callee16, undefined);
  })));
});

describe('createVerificationRequest', function () {
  it('creates a valid JWT for a request', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {
    var jwt;
    return _regenerator2.default.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return uport.createVerificationRequest({ claim: { test: { prop1: 1, prop2: 2 } } }, 'did:uport:223ab45');

          case 2:
            jwt = _context17.sent;
            _context17.t0 = expect;
            _context17.next = 6;
            return (0, _JWT.verifyJWT)({ audience: did }, jwt);

          case 6:
            _context17.t1 = _context17.sent;
            return _context17.abrupt('return', (0, _context17.t0)(_context17.t1).toMatchSnapshot());

          case 8:
          case 'end':
            return _context17.stop();
        }
      }
    }, _callee17, undefined);
  })));
});

describe('attest()', function () {
  beforeAll(function () {
    return mockresolver();
  });
  it('has correct payload in JWT for an attestation', function () {
    return uport.attest({ sub: 'did:uport:223ab45', claim: { email: 'bingbangbung@email.com' }, exp: 1485321133 + 1 }).then(function (jwt) {
      return expect((0, _JWT.verifyJWT)({ audience: did }, jwt)).toMatchSnapshot();
    });
  });
});

describe('authenticate()', function () {
  var createShareResp = function () {
    var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18() {
      var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var req;
      return _regenerator2.default.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return uport.createRequest({ requested: ['name', 'phone'] });

            case 2:
              req = _context18.sent;
              return _context18.abrupt('return', (0, _JWT.createJWT)({ address: mnid, signer: signer }, (0, _extends3.default)({}, payload, { req: req })));

            case 4:
            case 'end':
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    return function createShareResp() {
      return _ref18.apply(this, arguments);
    };
  }();

  var createShareRespWithVerifiedCredential = function () {
    var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19() {
      var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var req, attestation;
      return _regenerator2.default.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return uport.createRequest({ requested: ['name', 'phone'] });

            case 2:
              req = _context19.sent;
              _context19.next = 5;
              return uport.attest(claim);

            case 5:
              attestation = _context19.sent;
              return _context19.abrupt('return', (0, _JWT.createJWT)({ address: mnid, signer: signer }, (0, _extends3.default)({}, payload, { verified: [attestation], req: req })));

            case 7:
            case 'end':
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    return function createShareRespWithVerifiedCredential() {
      return _ref19.apply(this, arguments);
    };
  }();

  beforeAll(function () {
    return mockresolver({
      name: 'Super Developer',
      country: 'NI'
    });
  });

  it('returns profile mixing public and private claims', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {
    var jwt, profile;
    return _regenerator2.default.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return createShareResp({ own: { name: 'Davie', phone: '+15555551234' } });

          case 2:
            jwt = _context20.sent;
            _context20.next = 5;
            return uport.authenticate(jwt);

          case 5:
            profile = _context20.sent;

            expect(profile).toMatchSnapshot();

          case 7:
          case 'end':
            return _context20.stop();
        }
      }
    }, _callee20, undefined);
  })));

  it('returns profile mixing public and private claims and verified credentials', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {
    var jwt, profile;
    return _regenerator2.default.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return createShareRespWithVerifiedCredential({ own: { name: 'Davie', phone: '+15555551234' } });

          case 2:
            jwt = _context21.sent;
            _context21.next = 5;
            return uport.authenticate(jwt);

          case 5:
            profile = _context21.sent;

            expect(profile).toMatchSnapshot();

          case 7:
          case 'end':
            return _context21.stop();
        }
      }
    }, _callee21, undefined);
  })));

  it('returns profile with only public claims', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22() {
    var jwt, profile;
    return _regenerator2.default.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return createShareResp();

          case 2:
            jwt = _context22.sent;
            _context22.next = 5;
            return uport.authenticate(jwt);

          case 5:
            profile = _context22.sent;

            expect(profile).toMatchSnapshot();

          case 7:
          case 'end':
            return _context22.stop();
        }
      }
    }, _callee22, undefined);
  })));

  it('returns profile with private chain network id claims', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23() {
    var jwt, profile;
    return _regenerator2.default.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return createShareResp({ nad: '34wjsxwvduano7NFC8ujNJnFjbacgYeWA8m' });

          case 2:
            jwt = _context23.sent;
            _context23.next = 5;
            return uport.authenticate(jwt);

          case 5:
            profile = _context23.sent;

            expect(profile).toMatchSnapshot();

          case 7:
          case 'end':
            return _context23.stop();
        }
      }
    }, _callee23, undefined);
  })));

  it('returns profile with device key claims', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24() {
    var jwt, profile;
    return _regenerator2.default.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return createShareResp({ dad: '0xdeviceKey' });

          case 2:
            jwt = _context24.sent;
            _context24.next = 5;
            return uport.authenticate(jwt);

          case 5:
            profile = _context24.sent;

            expect(profile).toMatchSnapshot();

          case 7:
          case 'end':
            return _context24.stop();
        }
      }
    }, _callee24, undefined);
  })));

  it('returns pushToken if available', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25() {
    var jwt, profile;
    return _regenerator2.default.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return createShareResp({ capabilities: ['PUSHTOKEN'] });

          case 2:
            jwt = _context25.sent;
            _context25.next = 5;
            return uport.authenticate(jwt);

          case 5:
            profile = _context25.sent;

            expect(profile).toMatchSnapshot();

          case 7:
          case 'end':
            return _context25.stop();
        }
      }
    }, _callee25, undefined);
  })));

  it('handles response with missing challenge', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26() {
    var jwt;
    return _regenerator2.default.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return (0, _JWT.createJWT)({ address: mnid, signer: signer }, { own: { name: 'bob' } });

          case 2:
            jwt = _context26.sent;

            expect(uport.authenticate(jwt)).toMatchSnapshot();

          case 4:
          case 'end':
            return _context26.stop();
        }
      }
    }, _callee26, undefined);
  })));
});

describe('LEGACY receive()', function () {
  beforeAll(function () {
    return mockresolver({
      name: 'Bob Smith',
      country: 'NI'
    });
  });
  it('returns profile mixing public and private claims', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27() {
    var req, jwt, profile;
    return _regenerator2.default.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            _context27.next = 2;
            return uport.createRequest({ requested: ['name', 'phone'] });

          case 2:
            req = _context27.sent;
            _context27.next = 5;
            return (0, _JWT.createJWT)({ address: mnid, signer: signer }, { own: { name: 'Davie', phone: '+15555551234' }, req: req });

          case 5:
            jwt = _context27.sent;
            _context27.next = 8;
            return uport.receive(jwt);

          case 8:
            profile = _context27.sent;

            expect(profile).toMatchSnapshot();

          case 10:
          case 'end':
            return _context27.stop();
        }
      }
    }, _callee27, undefined);
  })));
});

describe('receive', function () {

  function createShareResp() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return uport.createRequest({ requested: ['name', 'phone'] }).then(function (jwt) {
      return (0, _JWT.createJWT)({ address: mnid, signer: signer }, (0, _extends3.default)({}, payload, { type: 'shareResp', req: jwt }));
    });
  }

  function createShareRespMissingRequest() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return uport.createRequest({ requested: ['name', 'phone'] }).then(function (jwt) {
      return (0, _JWT.createJWT)({ address: mnid, signer: signer }, (0, _extends3.default)({}, payload, { type: 'shareResp' }));
    });
  }

  function createShareRespWithExpiredRequest() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return uport.createRequest({ requested: ['name', 'phone'], exp: Date.now() - 1 }).then(function (jwt) {
      return (0, _JWT.createJWT)({ address: mnid, signer: signer }, (0, _extends3.default)({}, payload, { type: 'shareResp', req: jwt }));
    });
  }

  function createShareRespWithVerifiedCredential() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var verifiedClaim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { sub: '0x112233', claim: { email: 'bingbangbung@email.com' }, exp: 1485321133 + 1 };

    return uport.attest(verifiedClaim).then(function (jwt) {
      return createShareResp((0, _extends3.default)({}, payload, { verified: [jwt] }));
    });
  }

  it('returns profile mixing public and private claims', function () {
    return createShareResp({ own: { name: 'Davie', phone: '+15555551234' } }).then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile mixing public and private claims and verified credentials', function () {
    return createShareRespWithVerifiedCredential({ own: { name: 'Davie', phone: '+15555551234' } }).then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile with only public claims', function () {
    return createShareResp().then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile with private chain network id claims', function () {
    return createShareResp({ nad: '34wjsxwvduano7NFC8ujNJnFjbacgYeWA8m' }).then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile with device key claims', function () {
    return createShareResp({ dad: '0xdeviceKey' }).then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns pushToken if available', function () {
    return createShareResp({ capabilities: ['PUSHTOKEN'] }).then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      return expect(profile.pushToken).toEqual('PUSHTOKEN');
    });
  });

  it('handles response to expired request', function () {
    return createShareRespWithExpiredRequest().then(function (jwt) {
      return uport.receive(jwt);
    }).catch(function (error) {
      return expect(error.message).toEqual('JWT has expired: exp: 1485321132999 < now: 1485321133');
    });
  });

  it('handles response with missing challenge', function () {
    return createShareRespMissingRequest().then(function (jwt) {
      return uport.receive(jwt);
    }).catch(function (error) {
      return expect(error.message).toEqual('Challenge was not included in response');
    });
  });

  /////////////////////////////// no address in uport settings ///////////////////////////////

  it('returns profile mixing public and private claims', function () {
    return createShareResp({ own: { name: 'Davie', phone: '+15555551234' } }).then(function (jwt) {
      return uport2.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile mixing public and private claims and verified credentials', function () {
    return createShareRespWithVerifiedCredential({ own: { name: 'Davie', phone: '+15555551234' } }).then(function (jwt) {
      return uport2.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile with only public claims', function () {
    return createShareResp().then(function (jwt) {
      return uport2.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns profile with private chain network id claims', function () {
    return createShareResp({ nad: '34wjsxwvduano7NFC8ujNJnFjbacgYeWA8m' }).then(function (jwt) {
      return uport2.receive(jwt);
    }).then(function (profile) {
      return expect(profile).toMatchSnapshot();
    });
  });

  it('returns pushToken if available', function () {
    return createShareResp({ capabilities: ['PUSHTOKEN'] }).then(function (jwt) {
      return uport.receive(jwt);
    }).then(function (profile) {
      expect(profile.pushToken).toEqual('PUSHTOKEN');
    });
  });
});

describe('push', function () {
  var PUTUTU_URL = 'https://api.uport.me'; //'https://pututu.uport.space' // TODO - change to .me
  var API_v1_PATH = '/api/v1/sns';
  var API_v2_PATH = '/pututu/sns';
  var lambda = '/pututu/sns';
  var PUSHTOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NkstUiJ9.eyJpYXQiOjE1MzExOTcwMzgsImV4cCI6MTUzMjQ5MzAzOCwiYXVkIjoiMzVERFh3RjZIZHI2ZFFRbzFCUndRcnU3VzNkNTRhdnpCd2siLCJ0eXBlIjoibm90aWZpY2F0aW9ucyIsInZhbHVlIjoiYXJuOmF3czpzbnM6dXMtd2VzdC0yOjExMzE5NjIxNjU1ODplbmRwb2ludC9BUE5TL3VQb3J0LzVmMTA4YjZlLTk3NTItM2IwZC05NWM2LWYyZTU3MTM4ZWNlNSIsImlzcyI6ImRpZDpldGhyOjB4YjA2ZDJjZWY5ZDJjYTA3MjU2NmU3Y2RlZDMyYWI0OWY1OTFlNDRlOCJ9.0qZE3N2m7rTn8JaNVfp5LhICmzEWCqTBBh9_gn4ZGD19PCfhInX7XTav0JBRBtSKkJXx03nik9k4jZ3qvQ6CigE';
  var token = PUSHTOKEN;
  var payload = { url: 'me.uport:me', message: 'a friendly message' };
  var kp = _tweetnacl2.default.box.keyPair();
  var pubEncKey = _tweetnaclUtil2.default.encodeBase64(kp.publicKey);
  var secEncKey = kp.secretKey;

  beforeEach(function () {
    _nock2.default.disableNetConnect();
  });

  afterEach(function () {
    _nock2.default.enableNetConnect();
  });

  it('pushes url to pututu', function () {
    (0, _nock2.default)(PUTUTU_URL, {
      reqheaders: {
        'authorization': 'Bearer ' + PUSHTOKEN
      }
    }).post(lambda, function (body) {
      var encObj = JSON.parse(body.message);
      var box = _tweetnaclUtil2.default.decodeBase64(encObj.ciphertext);
      var nonce = _tweetnaclUtil2.default.decodeBase64(encObj.nonce);
      var from = _tweetnaclUtil2.default.decodeBase64(encObj.from);
      var decrypted = _tweetnacl2.default.box.open(box, nonce, from, secEncKey);
      var result = JSON.parse(_tweetnaclUtil2.default.encodeUTF8(decrypted));

      return result.url === payload.url && result.message === payload.message;
    }).reply(200, { status: 'success', message: 'd0b2bd07-d49e-5ba1-9b05-ec23ac921930' });
    return uport.push(PUSHTOKEN, pubEncKey, payload).then(function (response) {
      return expect(response).toEqual({ status: 'success', message: 'd0b2bd07-d49e-5ba1-9b05-ec23ac921930' });
    });
  });

  it('handles missing token', function () {
    return uport.push(null, pubEncKey, payload).catch(function (error) {
      return expect(error.message).toEqual('Missing push notification token');
    });
  });

  it('handles missing pubEncKey', function () {
    (0, _nock2.default)('https://pututu.uport.space', {
      reqheaders: {
        'authorization': 'Bearer ' + PUSHTOKEN
      }
    }).post(API_v1_PATH, function (body) {
      return body.message === payload.message && body.url === payload.url;
    }).reply(200, { status: 'success', message: 'd0b2bd07-d49e-5ba1-9b05-ec23ac921930' });

    console.error = jest.fn(function (msg) {
      expect(msg).toEqual('WARNING: Calling push without a public encryption key is deprecated');
    });
    return uport.push(PUSHTOKEN, null, payload).catch(function (error) {
      return expect(error.message).toEqual('Missing public encryption key of the receiver');
    });
  });

  it('handles missing payload', function () {
    return uport.push(PUSHTOKEN, pubEncKey, {}).catch(function (error) {
      return expect(error.message).toEqual('Missing payload url for sending to users device');
    });
  });

  it('handles invalid token', function () {
    (0, _nock2.default)(PUTUTU_URL, {
      reqheaders: {
        'authorization': 'Bearer ' + PUSHTOKEN
      }
    }).post(lambda, function (body) {
      var encObj = JSON.parse(body.message);
      var box = _tweetnaclUtil2.default.decodeBase64(encObj.ciphertext);
      var nonce = _tweetnaclUtil2.default.decodeBase64(encObj.nonce);
      var from = _tweetnaclUtil2.default.decodeBase64(encObj.from);
      var decrypted = _tweetnacl2.default.box.open(box, nonce, from, secEncKey);
      var result = JSON.parse(_tweetnaclUtil2.default.encodeUTF8(decrypted));

      return result.url === payload.url && result.message === payload.message;
    }).reply(403, 'Not allowed');

    return uport.push(PUSHTOKEN, pubEncKey, payload).catch(function (error) {
      return expect(error.message).toEqual('Error sending push notification to user: Invalid Token');
    });
  });

  it('handles random error', function () {
    (0, _nock2.default)(PUTUTU_URL, {
      reqheaders: {
        'authorization': 'Bearer ' + PUSHTOKEN
      }
    }).post(API_v2_PATH, function () {
      return true;
    }).reply(500, 'Server Error');

    return uport.push(PUSHTOKEN, pubEncKey, payload).catch(function (error) {
      return expect(error.message).toEqual('Error sending push notification to user: 500 Server Error');
    });
  });
});