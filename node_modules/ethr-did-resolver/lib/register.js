'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attrTypes = exports.delegateTypes = exports.REGISTRY = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

exports.bytes32toString = bytes32toString;
exports.stringToBytes32 = stringToBytes32;
exports.wrapDidDocument = wrapDidDocument;
exports.default = register;

var _didResolver = require('did-resolver');

var _ethjsProviderHttp = require('ethjs-provider-http');

var _ethjsProviderHttp2 = _interopRequireDefault(_ethjsProviderHttp);

var _ethjsQuery = require('ethjs-query');

var _ethjsQuery2 = _interopRequireDefault(_ethjsQuery);

var _ethjsAbi = require('ethjs-abi');

var _ethjsAbi2 = _interopRequireDefault(_ethjsAbi);

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

var _ethjsContract = require('ethjs-contract');

var _ethjsContract2 = _interopRequireDefault(_ethjsContract);

var _ethrDidRegistry = require('../contracts/ethr-did-registry.json');

var _ethrDidRegistry2 = _interopRequireDefault(_ethrDidRegistry);

var _buffer = require('buffer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REGISTRY = exports.REGISTRY = '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b';

function bytes32toString(bytes32) {
  return _buffer.Buffer.from(bytes32.slice(2), 'hex').toString('utf8').replace(/\0+$/, '');
}

function stringToBytes32(str) {
  var buffstr = '0x' + _buffer.Buffer.from(str).slice(0, 32).toString('hex');
  return buffstr + '0'.repeat(66 - buffstr.length);
}

var delegateTypes = exports.delegateTypes = {
  Secp256k1SignatureAuthentication2018: stringToBytes32('sigAuth'),
  Secp256k1VerificationKey2018: stringToBytes32('veriKey')
};

var attrTypes = exports.attrTypes = {
  sigAuth: 'SignatureAuthentication2018',
  veriKey: 'VerificationKey2018'
};

function wrapDidDocument(did, owner, history) {
  var now = new _bn2.default(Math.floor(new Date().getTime() / 1000));
  // const expired = {}
  var publicKey = [{
    id: did + '#owner',
    type: 'Secp256k1VerificationKey2018',
    owner: did,
    ethereumAddress: owner
  }];

  var authentication = [{
    type: 'Secp256k1SignatureAuthentication2018',
    publicKey: did + '#owner'
  }];

  var delegateCount = 0;
  var auth = {};
  var pks = {};
  var services = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(history), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var event = _step.value;

      var validTo = event.validTo;
      var key = event._eventName + '-' + (event.delegateType || event.name) + '-' + (event.delegate || event.value);
      if (validTo && validTo.gte(now)) {
        if (event._eventName === 'DIDDelegateChanged') {
          delegateCount++;
          var delegateType = bytes32toString(event.delegateType);
          switch (delegateType) {
            case 'sigAuth':
              auth[key] = {
                type: 'Secp256k1SignatureAuthentication2018',
                publicKey: did + '#delegate-' + delegateCount
              };
            case 'veriKey':
              pks[key] = {
                id: did + '#delegate-' + delegateCount,
                type: 'Secp256k1VerificationKey2018',
                owner: did,
                ethereumAddress: event.delegate
              };
              break;
          }
        } else if (event._eventName === 'DIDAttributeChanged') {
          var name = bytes32toString(event.name);
          var match = name.match(/^did\/(pub|auth|svc)\/(\w+)(\/(\w+))?(\/(\w+))?$/);
          if (match) {
            var section = match[1];
            var algo = match[2];
            var type = attrTypes[match[4]] || match[4];
            var encoding = match[6];
            switch (section) {
              case 'pub':
                delegateCount++;
                var pk = {
                  id: did + '#delegate-' + delegateCount,
                  type: '' + algo + type,
                  owner: did
                };
                switch (encoding) {
                  case null:
                  case undefined:
                  case 'hex':
                    pk.publicKeyHex = event.value.slice(2);
                    break;
                  case 'base64':
                    pk.publicKeyBase64 = _buffer.Buffer.from(event.value.slice(2), 'hex').toString('base64');
                    break;
                  case 'base58':
                    pk.publicKeyBase58 = _buffer.Buffer.from(event.value.slice(2), 'hex').toString('base58');
                    break;
                  default:
                    pk.value = event.value;
                }
                pks[key] = pk;
                break;
              case 'svc':
                services[key] = {
                  type: algo,
                  serviceEndpoint: _buffer.Buffer.from(event.value.slice(2), 'hex').toString()
                };
                break;
            }
          }
        }
      } else {
        if (delegateCount > 0 && (event._eventName === 'DIDDelegateChanged' || event._eventName === 'DIDAttributeChanged' && bytes32toString(event.name).match(/^did\/pub\//)) && validTo.lt(now)) delegateCount--;
        delete auth[key];
        delete pks[key];
        delete services[key];
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var doc = {
    '@context': 'https://w3id.org/did/v1',
    id: did,
    publicKey: publicKey.concat((0, _values2.default)(pks)),
    authentication: authentication.concat((0, _values2.default)(auth))
  };
  if ((0, _values2.default)(services).length > 0) {
    doc.service = (0, _values2.default)(services);
  }

  return doc;
}

function configureProvider() {
  var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (conf.provider) {
    return conf.provider;
  } else if (conf.web3) {
    return conf.web3.currentProvider;
  } else {
    return new _ethjsProviderHttp2.default(conf.rpcUrl || 'https://mainnet.infura.io/ethr-did');
  }
}

function register() {
  var _this = this;

  var changeLog = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(identity) {
      var history, previousChange, blockNumber, logs, events, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, event;

      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              history = [];
              _context2.next = 3;
              return lastChanged(identity);

            case 3:
              previousChange = _context2.sent;

            case 4:
              if (!previousChange) {
                _context2.next = 32;
                break;
              }

              blockNumber = previousChange;
              _context2.next = 8;
              return eth.getLogs({
                address: registryAddress,
                topics: [null, '0x000000000000000000000000' + identity.slice(2)],
                fromBlock: previousChange,
                toBlock: previousChange
              });

            case 8:
              logs = _context2.sent;
              events = logDecoder(logs);

              previousChange = undefined;
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 14;
              for (_iterator2 = (0, _getIterator3.default)(events); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                event = _step2.value;

                history.unshift(event);
                if (event.previousChange.lt(blockNumber)) {
                  previousChange = event.previousChange;
                }
              }
              _context2.next = 22;
              break;

            case 18:
              _context2.prev = 18;
              _context2.t0 = _context2['catch'](14);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t0;

            case 22:
              _context2.prev = 22;
              _context2.prev = 23;

              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }

            case 25:
              _context2.prev = 25;

              if (!_didIteratorError2) {
                _context2.next = 28;
                break;
              }

              throw _iteratorError2;

            case 28:
              return _context2.finish(25);

            case 29:
              return _context2.finish(22);

            case 30:
              _context2.next = 4;
              break;

            case 32:
              return _context2.abrupt('return', history);

            case 33:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[14, 18, 22, 30], [23,, 25, 29]]);
    }));

    return function changeLog(_x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  var resolve = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(did, parsed) {
      var owner, history;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (parsed.id.match(/^0x[0-9a-fA-F]{40}$/)) {
                _context3.next = 2;
                break;
              }

              throw new Error('Not a valid ethr DID: ' + did);

            case 2:
              _context3.next = 4;
              return didReg.identityOwner(parsed.id);

            case 4:
              owner = _context3.sent;
              _context3.next = 7;
              return changeLog(parsed.id);

            case 7:
              history = _context3.sent;
              return _context3.abrupt('return', wrapDidDocument(did, owner['0'], history));

            case 9:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function resolve(_x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }();

  var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var provider = configureProvider(conf);
  var eth = new _ethjsQuery2.default(provider);
  var registryAddress = conf.registry || REGISTRY;
  var DidReg = new _ethjsContract2.default(eth)(_ethrDidRegistry2.default);
  var didReg = DidReg.at(registryAddress);
  var logDecoder = _ethjsAbi2.default.logDecoder(_ethrDidRegistry2.default, false);

  var lastChanged = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(identity) {
      var result;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return didReg.changed(identity);

            case 2:
              result = _context.sent;

              if (!result) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return', result['0']);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function lastChanged(_x3) {
      return _ref.apply(this, arguments);
    };
  }();

  (0, _didResolver.registerMethod)('ethr', resolve);
}

// module.exports = register